From 20a64cf32b7db792d33f45cbdd8f95b10ecd553e Mon Sep 17 00:00:00 2001
From: Zuo Wang <wangzuo.nj@qq.com>
Date: Tue, 3 May 2016 02:32:07 -0700
Subject: [PATCH 1/3] kms, aes deencrypt

Change-Id: Ia5cf567cdaf8729a614323dc4a7c8d3acc6ae13a
---
 .gitignore                                         |  5 +-
 CMakeLists.txt                                     |  6 ++
 be/CMakeLists.txt                                  |  3 +
 be/src/exprs/utility-functions.cc                  | 70 ++++++++++++++++
 be/src/exprs/utility-functions.h                   |  8 ++
 be/src/runtime/exec-env.cc                         |  8 ++
 be/src/runtime/exec-env.h                          |  2 +
 be/src/service/frontend.cc                         |  8 ++
 be/src/service/frontend.h                          |  5 ++
 be/src/udf_samples/CMakeLists.txt                  | 17 ++++
 be/src/udf_samples/aes-deencrypt.cc                | 67 ++++++++++++++++
 be/src/udf_samples/aes-deencrypt.h                 | 28 +++++++
 be/src/udf_samples/decrypt-test.cc                 | 36 +++++++++
 be/src/udf_samples/decrypt.cc                      | 76 ++++++++++++++++++
 be/src/udf_samples/decrypt.h                       | 29 +++++++
 be/src/udf_samples/deencrypt-test.cc               | 38 +++++++++
 be/src/udf_samples/secret-sharing.cc               | 92 ++++++++++++++++++++++
 be/src/udf_samples/secret-sharing.h                | 29 +++++++
 cmake_modules/FindCryptopp.cmake                   | 42 ++++++++++
 common/function-registry/impala_functions.py       |  8 ++
 common/thrift/Frontend.thrift                      | 16 ++++
 .../com/cloudera/impala/service/JniFrontend.java   | 83 +++++++++++++++++++
 22 files changed, 675 insertions(+), 1 deletion(-)
 create mode 100644 be/src/udf_samples/aes-deencrypt.cc
 create mode 100644 be/src/udf_samples/aes-deencrypt.h
 create mode 100644 be/src/udf_samples/decrypt-test.cc
 create mode 100644 be/src/udf_samples/decrypt.cc
 create mode 100644 be/src/udf_samples/decrypt.h
 create mode 100644 be/src/udf_samples/deencrypt-test.cc
 create mode 100644 be/src/udf_samples/secret-sharing.cc
 create mode 100644 be/src/udf_samples/secret-sharing.h
 create mode 100644 cmake_modules/FindCryptopp.cmake

diff --git a/.gitignore b/.gitignore
index 0987017..9b7c918 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,6 @@
+cryptopp
+libgfshare
+ssss-0.5
 *~
 *.pyc
 .*.swp
@@ -39,4 +42,4 @@ avro_schemas/
 logs/
 
 # Impala toolchain directory
-toolchain/
\ No newline at end of file
+toolchain/
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 595b082..0740a95 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -260,6 +260,12 @@ set(LDAP_LIBRARY ldapstatic)
 set(LBER_LIBRARY lberstatic)
 message(STATUS "LDAP: ${LDAP_INCLUDE_DIR}")
 
+# find cryptopp
+find_package(Cryptopp REQUIRED)
+include_directories(${CRYPTOPP_INCLUDE_DIR})
+set(CRYPTOPP_LIBRARY cryptoppstatic)
+message(STATUS "CRYPTOPP: ${CRYPTOPP_INCLUDE_DIR}")
+
 # find thrift headers and libs
 find_package(Thrift REQUIRED)
 include_directories(${THRIFT_INCLUDE_DIR})
diff --git a/be/CMakeLists.txt b/be/CMakeLists.txt
index c866f84..83f6a14 100644
--- a/be/CMakeLists.txt
+++ b/be/CMakeLists.txt
@@ -224,6 +224,8 @@ set(CLANG_INCLUDE_FLAGS
   "-I${ZLIB_INCLUDE_DIR}"
   "-I${OPENSSL_INCLUDE_DIR}"
   "-I${LDAP_INCLUDE_DIR}"
+  "-I${CRYPTOPP_INCLUDE_DIR}"
+  "-I/home/dev/Impala/cryptopp"
 )
 
 # allow linking of static libs into dynamic lib
@@ -316,6 +318,7 @@ set (IMPALA_LINK_LIBS ${IMPALA_LINK_LIBS}
   ${SASL_LIBRARY}
   ${LDAP_LIBRARY}
   ${LBER_LIBRARY}
+  ${CRYPTOPP_LIBRARY}
   ThriftSaslTransport
   gutil
   glogstatic
diff --git a/be/src/exprs/utility-functions.cc b/be/src/exprs/utility-functions.cc
index b990bda..8273b4d 100644
--- a/be/src/exprs/utility-functions.cc
+++ b/be/src/exprs/utility-functions.cc
@@ -25,6 +25,10 @@
 #include "util/debug-util.h"
 #include "util/time.h"
 
+#include "aes.h"
+#include "filters.h"
+#include "modes.h"
+
 #include "common/names.h"
 
 using namespace strings;
@@ -147,6 +151,72 @@ void UtilityFunctions::UuidClose(FunctionContext* ctx,
   }
 }
 
+void UtilityFunctions::CryptPrepare(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope) {
+  if (scope == FunctionContext::THREAD_LOCAL) {
+    if (ctx->GetFunctionState(FunctionContext::THREAD_LOCAL) == NULL) {
+       string key_str = ctx->impl()->state()->exec_env()->GetKey("decrypt.k1");
+       byte* key = new byte[CryptoPP::AES::DEFAULT_KEYLENGTH];
+       memset(key, 0x00, CryptoPP::AES::DEFAULT_KEYLENGTH);
+       
+       int len = CryptoPP::AES::DEFAULT_KEYLENGTH;
+       if (key_str.length() < len) len = key_str.length();
+       for (int i = 0; i < len; ++i) {
+         key[i] = key_str[i];
+       }
+       ctx->SetFunctionState(scope, key);
+    }
+  }
+}
+
+void UtilityFunctions::CryptClose(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope) {
+  if (scope == FunctionContext::THREAD_LOCAL) {
+    byte* key = reinterpret_cast<byte*>(
+        ctx->GetFunctionState(FunctionContext::THREAD_LOCAL));
+    DCHECK(key != NULL);
+    delete [] key;
+  }
+}
+
+StringVal UtilityFunctions::Decrypt(FunctionContext* context, const StringVal& arg1) {
+  if (arg1.is_null) return StringVal::null();
+
+  byte iv[CryptoPP::AES::BLOCKSIZE];
+  memset(iv, 0x00, CryptoPP::AES::BLOCKSIZE);
+
+  byte* key = reinterpret_cast<byte*>(
+      context->GetFunctionState(FunctionContext::THREAD_LOCAL));
+  CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);  
+  CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption(aesDecryption, iv);
+  std::string result_str;
+  CryptoPP::StreamTransformationFilter stfDecryptor(
+      cbcDecryption, new CryptoPP::StringSink(result_str));
+  stfDecryptor.Put(arg1.ptr, arg1.len);
+  stfDecryptor.MessageEnd();
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
+
+StringVal UtilityFunctions::Encrypt(FunctionContext* context, const StringVal& arg1) {
+  if (arg1.is_null) return StringVal::null();
+
+  byte iv[CryptoPP::AES::BLOCKSIZE];
+  memset(iv, 0x00, CryptoPP::AES::BLOCKSIZE);
+
+  byte* key = reinterpret_cast<byte*>(
+      context->GetFunctionState(FunctionContext::THREAD_LOCAL));
+  CryptoPP::AES::Encryption aesEncryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);  
+  CryptoPP::CBC_Mode_ExternalCipher::Encryption cbcEncryption(aesEncryption, iv);
+  std::string result_str;
+  CryptoPP::StreamTransformationFilter stfEncryptor(
+      cbcEncryption, new CryptoPP::StringSink(result_str));
+  stfEncryptor.Put(arg1.ptr, arg1.len);
+  stfEncryptor.MessageEnd();
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
+
 template<typename T>
 StringVal UtilityFunctions::TypeOf(FunctionContext* ctx, const T& /*input_val*/) {
   FunctionContext::TypeDesc type_desc = *(ctx->GetArgType(0));
diff --git a/be/src/exprs/utility-functions.h b/be/src/exprs/utility-functions.h
index 56c84c6..ed2c546 100644
--- a/be/src/exprs/utility-functions.h
+++ b/be/src/exprs/utility-functions.h
@@ -65,6 +65,14 @@ class UtilityFunctions {
   static void UuidClose(FunctionContext* ctx,
       FunctionContext::FunctionStateScope scope);
 
+
+  static StringVal Decrypt(FunctionContext* context, const StringVal& arg1);
+  static StringVal Encrypt(FunctionContext* context, const StringVal& arg1);
+  static void CryptPrepare(FunctionContext* ctx,
+      FunctionContext::FunctionStateScope scope);
+  static void CryptClose(FunctionContext* ctx,
+      FunctionContext::FunctionStateScope scope);
+
   /// Implementation of the typeOf() function. Returns the type of the input
   /// expression. input_val is not used and it is kept here in order to let
   /// the compiler generate the corresponding fully-qualified function name.
diff --git a/be/src/runtime/exec-env.cc b/be/src/runtime/exec-env.cc
index fbf427f..9cb9f1a 100644
--- a/be/src/runtime/exec-env.cc
+++ b/be/src/runtime/exec-env.cc
@@ -420,4 +420,12 @@ Status ExecEnv::StartServices() {
   return Status::OK();
 }
 
+string ExecEnv::GetKey(string keyName) {
+  TGetKeyRequest get_key_request;
+  get_key_request.__set_key_name("decrypt.k1");
+  TGetKeyResponse get_key_response;
+  frontend_->GetKey(get_key_request, &get_key_response);
+  return get_key_response.key;
+}
+
 }
diff --git a/be/src/runtime/exec-env.h b/be/src/runtime/exec-env.h
index 4f6e7f0..910dc9d 100644
--- a/be/src/runtime/exec-env.h
+++ b/be/src/runtime/exec-env.h
@@ -122,6 +122,8 @@ class ExecEnv {
   /// resource locations.
   bool is_pseudo_distributed_llama() { return is_pseudo_distributed_llama_; }
 
+  std::string GetKey(std::string keyName);
+
  protected:
   /// Leave protected so that subclasses can override
   boost::scoped_ptr<MetricGroup> metrics_;
diff --git a/be/src/service/frontend.cc b/be/src/service/frontend.cc
index 257477d..9592350 100644
--- a/be/src/service/frontend.cc
+++ b/be/src/service/frontend.cc
@@ -60,6 +60,9 @@ Frontend::Frontend() {
     {"createExecRequest", "([B)[B", &create_exec_request_id_},
     {"getExplainPlan", "([B)Ljava/lang/String;", &get_explain_plan_id_},
     {"getHadoopConfig", "([B)[B", &get_hadoop_config_id_},
+
+    {"getKey", "([B)[B", &get_key_id_},
+
     {"getAllHadoopConfigs", "()[B", &get_hadoop_configs_id_},
     {"checkConfiguration", "()Ljava/lang/String;", &check_config_id_},
     {"updateCatalogCache", "([B)[B", &update_catalog_cache_id_},
@@ -236,6 +239,11 @@ Status Frontend::GetHadoopConfig(const TGetHadoopConfigRequest& request,
   return JniUtil::CallJniMethod(fe_, get_hadoop_config_id_, request, response);
 }
 
+Status Frontend::GetKey(const TGetKeyRequest& request,
+    TGetKeyResponse* response) {
+  return JniUtil::CallJniMethod(fe_, get_key_id_, request, response);
+}
+
 Status Frontend::LoadData(const TLoadDataReq& request, TLoadDataResp* response) {
   return JniUtil::CallJniMethod(fe_, load_table_data_id_, request, response);
 }
diff --git a/be/src/service/frontend.h b/be/src/service/frontend.h
index e581bef..8dacd4c 100644
--- a/be/src/service/frontend.h
+++ b/be/src/service/frontend.h
@@ -148,6 +148,9 @@ class Frontend {
   Status GetHadoopConfig(const TGetHadoopConfigRequest& request,
       TGetHadoopConfigResponse* response);
 
+  Status GetKey(const TGetKeyRequest& request,
+      TGetKeyResponse* response);
+
   /// Loads a single file or set of files into a table or partition. Saves the RPC
   /// response in the TLoadDataResp output parameter. Returns OK if the operation
   /// completed successfully.
@@ -169,6 +172,8 @@ class Frontend {
   /// Descriptor of Java Frontend class itself, used to create a new instance.
   jclass fe_class_;
 
+  jmethodID get_key_id_;  // JniFrontend.getKey(byte[])
+
   jobject fe_;  // instance of com.cloudera.impala.service.JniFrontend
   jmethodID create_exec_request_id_;  // JniFrontend.createExecRequest()
   jmethodID get_explain_plan_id_;  // JniFrontend.getExplainPlan()
diff --git a/be/src/udf_samples/CMakeLists.txt b/be/src/udf_samples/CMakeLists.txt
index 52cdc81..5f43d25 100644
--- a/be/src/udf_samples/CMakeLists.txt
+++ b/be/src/udf_samples/CMakeLists.txt
@@ -37,6 +37,21 @@ add_library(udfsample SHARED udf-sample.cc)
 add_dependencies(udfsample thrift-deps)
 add_library(udasample SHARED uda-sample.cc hyperloglog-uda.cc)
 add_dependencies(udasample thrift-deps)
+set(CRYPTOPP_INCLUDE_DIR "/home/dev/Impala/cryptopp")
+set(CRYPTOPP_LIBS "/home/dev/Impala/cryptopp/libcryptopp.a")
+include_directories(${CRYPTOPP_INCLUDE_DIR})
+add_library(aes-deencrypt SHARED aes-deencrypt.cc)
+add_dependencies(aes-deencrypt thrift-deps)
+target_link_libraries(aes-deencrypt ${CRYPTOPP_LIBS})
+#add_library(decrypt SHARED decrypt.cc)
+#add_dependencies(decrypt thrift-deps)
+#target_link_libraries(decrypt ${IMPALA_LINK_LIBS} ImpalaUdf ${CRYPTOPP_LIBS})
+#set(LIBGFSHARE_INCLUDE_DIR "/home/dev/Impala/libgfshare/include")
+#set(LIBGFSHARE_LIBS "/home/dev/Impala/libgfshare/libgfshare.a")
+#include_directories(${LIBGFSHARE_INCLUDE_DIR})
+#add_library(secret-sharing SHARED secret-sharing.cc)
+#add_dependencies(secret-sharing thrift-deps)
+#target_link_libraries(secret-sharing ${LIBGFSHARE_LIBS})
 
 # Custom targest to cross compile UDA/UDF to ir
 COMPILE_TO_IR(udf-sample.cc )
@@ -49,3 +64,5 @@ add_executable(udf-sample-test udf-sample-test.cc)
 target_link_libraries(udf-sample-test ImpalaUdf udfsample)
 add_executable(uda-sample-test uda-sample-test.cc)
 target_link_libraries(uda-sample-test ImpalaUdf udasample)
+#add_executable(decrypt-test decrypt-test.cc)
+#target_link_libraries(decrypt-test ImpalaUdf decrypt)
diff --git a/be/src/udf_samples/aes-deencrypt.cc b/be/src/udf_samples/aes-deencrypt.cc
new file mode 100644
index 0000000..7cb9da5
--- /dev/null
+++ b/be/src/udf_samples/aes-deencrypt.cc
@@ -0,0 +1,67 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "aes-deencrypt.h"
+
+#include "aes.h"
+#include "filters.h"
+#include "modes.h"
+
+#include "util/jni-util.h"
+
+StringVal AES_Decrypt(FunctionContext* context, const StringVal& arg1,
+    const StringVal& arg2) {
+  if (arg1.is_null || arg2.is_null || arg2.len > CryptoPP::AES::DEFAULT_KEYLENGTH) {
+    return StringVal::null();
+  }
+
+  byte key[CryptoPP::AES::DEFAULT_KEYLENGTH];
+  byte iv[CryptoPP::AES::BLOCKSIZE];
+  memset(key, 0x00, CryptoPP::AES::DEFAULT_KEYLENGTH);
+  memset(iv, 0x00, CryptoPP::AES::BLOCKSIZE);
+  for (int i = 0; i < arg2.len; ++i) key[i] = arg2.ptr[i];
+
+  CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);  
+  CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption(aesDecryption, iv);
+  std::string result_str;
+  CryptoPP::StreamTransformationFilter stfDecryptor(
+      cbcDecryption, new CryptoPP::StringSink(result_str));
+  stfDecryptor.Put(arg1.ptr, arg1.len);
+  stfDecryptor.MessageEnd();
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
+
+StringVal AES_Encrypt(FunctionContext* context, const StringVal& arg1,
+    const StringVal& arg2) {
+  if (arg1.is_null || arg2.is_null || arg2.len > CryptoPP::AES::DEFAULT_KEYLENGTH) {
+    return StringVal::null();
+  }
+
+  byte key[CryptoPP::AES::DEFAULT_KEYLENGTH];
+  byte iv[CryptoPP::AES::BLOCKSIZE];
+  memset(key, 0x00, CryptoPP::AES::DEFAULT_KEYLENGTH);
+  memset(iv, 0x00, CryptoPP::AES::BLOCKSIZE);
+  for (int i = 0; i < arg2.len; ++i) key[i] = arg2.ptr[i];
+
+  CryptoPP::AES::Encryption aesEncryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);  
+  CryptoPP::CBC_Mode_ExternalCipher::Encryption cbcEncryption(aesEncryption, iv);
+  std::string result_str;
+  CryptoPP::StreamTransformationFilter stfEncryptor(
+      cbcEncryption, new CryptoPP::StringSink(result_str));
+  stfEncryptor.Put(arg1.ptr, arg1.len);
+  stfEncryptor.MessageEnd();
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
diff --git a/be/src/udf_samples/aes-deencrypt.h b/be/src/udf_samples/aes-deencrypt.h
new file mode 100644
index 0000000..0437034
--- /dev/null
+++ b/be/src/udf_samples/aes-deencrypt.h
@@ -0,0 +1,28 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+#ifndef IMPALA_DEENCRYPT_UDF_H
+#define IMPALA_DEENCRYPT_UDF_H
+
+#include <udf/udf.h>
+
+using namespace impala_udf;
+
+StringVal AES_Decrypt(FunctionContext* context, const StringVal& arg1,
+    const StringVal& arg2);
+StringVal AES_Decrypt(FunctionContext* context, const StringVal& arg1,
+    const StringVal& arg2);
+
+#endif
diff --git a/be/src/udf_samples/decrypt-test.cc b/be/src/udf_samples/decrypt-test.cc
new file mode 100644
index 0000000..569bd2f
--- /dev/null
+++ b/be/src/udf_samples/decrypt-test.cc
@@ -0,0 +1,36 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include <iostream>
+
+#include <udf/udf-test-harness.h>
+#include "decrypt.h"
+
+#include "common/names.h"
+
+using namespace impala;
+using namespace impala_udf;
+
+int main(int argc, char** argv) {
+  bool passed = true;
+  // Using the test harness helpers, validate the UDF returns correct results.
+  // These tests validate:
+  //  AddUdf(1, 2) == 3
+  //  AddUdf(null, 2) == null
+  passed &= UdfTestHarness::ValidateUdf<StringVal, StringVal>(
+      Decrypt, StringVal("abc"), StringVal("abc"));
+
+  cout << "Tests " << (passed ? "Passed." : "Failed.") << endl;
+  return !passed;
+}
diff --git a/be/src/udf_samples/decrypt.cc b/be/src/udf_samples/decrypt.cc
new file mode 100644
index 0000000..a817d26
--- /dev/null
+++ b/be/src/udf_samples/decrypt.cc
@@ -0,0 +1,76 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "decrypt.h"
+
+#include "aes.h"
+#include "filters.h"
+#include "modes.h"
+
+#include "util/jni-util.h"
+
+#define RETURN_IF_XERROR(ctx, env) \
+  do { \
+    jthrowable exc = (env)->ExceptionOccurred(); \
+    if (exc != NULL) { \
+      (env)->ExceptionClear(); \
+      (env)->DeleteLocalRef(exc); \
+      (ctx)->SetError("error in call to jni."); \
+      return; \
+    } \
+  } while (false)
+
+void DecryptPrepare(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope) {
+  if (scope == FunctionContext::THREAD_LOCAL) {
+    if (ctx->GetFunctionState(FunctionContext::THREAD_LOCAL) == NULL) {
+      JNIEnv* env = getJNIEnv();
+      jclass conf_cl = env->FindClass("org/apache/hadoop/Configuration");
+      RETURN_IF_XERROR(ctx, env);
+      jmethodID conf_ctor = env->GetMethodID(conf_cl, "<init>", "()V");
+      jobject conf = env->NewObject(conf_cl, conf_ctor);
+      RETURN_IF_XERROR(ctx, env);
+      //ctx->SetFunctionState(scope, uuid_gen);
+    }
+  }
+}
+
+void DecryptClose(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope) {
+  if (scope == FunctionContext::THREAD_LOCAL) {
+    //void* uuid_gen = ctx->GetFunctionState(FunctionContext::THREAD_LOCAL);
+    //DCHECK(uuid_gen != NULL);
+    //delete uuid_gen;
+  }
+}
+
+StringVal Decrypt(FunctionContext* context, const StringVal& arg1) {
+  if (arg1.is_null) return StringVal::null();
+
+  byte key[CryptoPP::AES::DEFAULT_KEYLENGTH];
+  byte iv[CryptoPP::AES::BLOCKSIZE];
+  memset(key, 0x00, CryptoPP::AES::DEFAULT_KEYLENGTH);
+  memset(iv, 0x00, CryptoPP::AES::BLOCKSIZE);
+
+  CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);  
+  CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption(aesDecryption, iv);
+  std::string result_str;
+  CryptoPP::StreamTransformationFilter stfDecryptor(
+      cbcDecryption, new CryptoPP::StringSink(result_str));
+  stfDecryptor.Put(arg1.ptr, arg1.len);
+  stfDecryptor.MessageEnd();
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
+
diff --git a/be/src/udf_samples/decrypt.h b/be/src/udf_samples/decrypt.h
new file mode 100644
index 0000000..32838ac
--- /dev/null
+++ b/be/src/udf_samples/decrypt.h
@@ -0,0 +1,29 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+#ifndef IMPALA_DEENCRYPT_UDF_H
+#define IMPALA_DEENCRYPT_UDF_H
+
+#include <udf/udf.h>
+
+using namespace impala_udf;
+
+StringVal Decrypt(FunctionContext* context, const StringVal arg1);
+void DecryptPrepare(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope);
+void DecryptClose(FunctionContext* ctx,
+    FunctionContext::FunctionStateScope scope);
+
+#endif
diff --git a/be/src/udf_samples/deencrypt-test.cc b/be/src/udf_samples/deencrypt-test.cc
new file mode 100644
index 0000000..abd20ab
--- /dev/null
+++ b/be/src/udf_samples/deencrypt-test.cc
@@ -0,0 +1,38 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include <iostream>
+
+#include <udf/udf-test-harness.h>
+#include "aes-deencrypt.h"
+
+#include "common/names.h"
+
+using namespace impala;
+using namespace impala_udf;
+
+int main(int argc, char** argv) {
+  bool passed = true;
+  // Using the test harness helpers, validate the UDF returns correct results.
+  // These tests validate:
+  //  AddUdf(1, 2) == 3
+  //  AddUdf(null, 2) == null
+//  passed &= UdfTestHarness::ValidateUdf<StringVal, StringVal, StringVal>(
+//      AES_Encrypt, IntVal(1), IntVal(2), IntVal(3));
+//  passed &= UdfTestHarness::ValidateUdf<IntVal, IntVal, IntVal>(
+//      AddUdf, IntVal::null(), IntVal(2), IntVal::null());
+
+  cout << "Tests " << (passed ? "Passed." : "Failed.") << endl;
+  return !passed;
+}
diff --git a/be/src/udf_samples/secret-sharing.cc b/be/src/udf_samples/secret-sharing.cc
new file mode 100644
index 0000000..0bc4494
--- /dev/null
+++ b/be/src/udf_samples/secret-sharing.cc
@@ -0,0 +1,92 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "aes-deencrypt.h"
+
+extern "C" {
+
+#include "libgfshare.h"
+
+}
+
+#include "exprs/math-functions.h"
+
+#include <string>
+
+#define BUFFER_SIZE 4096
+
+StringVal SS_Split(FunctionContext* context, const IntVal& arg1, const IntVal& arg2,
+    const StringVal& arg3) {
+  gfshare_ctx *G;
+  int sharecount = arg1.val;
+  int threshold = arg2.val;
+  int keylen = arg3.len;
+  unsigned char* sharenrs = reinterpret_cast<unsigned char*>(malloc(sharecount));
+  for(int i = 0; i < sharecount; ++i) {
+    unsigned char proposed = (random() & 0xff00) >> 8;
+    if( proposed == 0 ) {
+      proposed = 1;
+    }
+    SHARENR_TRY_AGAIN:
+    for(int j = 0; j < i; ++j ) {
+      if( sharenrs[j] == proposed ) {
+        proposed++;
+        if( proposed == 0 ) proposed = 1;
+        goto SHARENR_TRY_AGAIN;
+      }
+    }
+    sharenrs[i] = proposed;
+  }
+  G = gfshare_ctx_init_enc(sharenrs, sharecount, threshold, std::min(BUFFER_SIZE, keylen));
+  gfshare_ctx_enc_setsecret(G, arg3.ptr);
+  StringVal buffer(context, BUFFER_SIZE);
+  std::string result_str;
+  for(int i = 0; i < sharecount; ++i) {
+    gfshare_ctx_enc_getshare(G, i, buffer.ptr);
+    result_str += impala::MathFunction::HexString(context, buffer);
+    result_str += "\n";
+  }
+  return StringVal::CopyFrom(context, 
+      reinterpret_cast<const uint8_t*>(result_str.c_str()), result_str.size());
+}
+
+StringVal SS_Combine(FunctionContext* context, const StringVal& arg1,
+    int num_var_args, const StringVal* args) {
+  int sharecount = num_var_args;
+  unsigned char* sharenrs = reinterpret_cast<unsigned char*>(malloc(sharecount));
+  for(int i = 0; i < sharecount; ++i) {
+    unsigned char proposed = (random() & 0xff00) >> 8;
+    if( proposed == 0 ) {
+      proposed = 1;
+    }
+    SHARENR_TRY_AGAIN:
+    for(int j = 0; j < i; ++j ) {
+      if( sharenrs[j] == proposed ) {
+        proposed++;
+        if( proposed == 0 ) proposed = 1;
+        goto SHARENR_TRY_AGAIN;
+      }
+    }
+    sharenrs[i] = proposed;
+  }
+  gfshare_ctx *G;
+  G = gfshare_ctx_init_dec(sharenrs, sharecount, BUFFER_SIZE);
+  for (int i = 0; i < sharecount; ++i) {
+    gfshare_ctx_dec_giveshare(G, i, args[i].ptr);
+  }
+  gfshare_ctx_dec_extract(G, args[0].ptr);
+  gfshare_ctx_free(G);
+
+  return StringVal::CopyFrom(context, args[0].ptr, args[0].len);
+}
diff --git a/be/src/udf_samples/secret-sharing.h b/be/src/udf_samples/secret-sharing.h
new file mode 100644
index 0000000..ce08043
--- /dev/null
+++ b/be/src/udf_samples/secret-sharing.h
@@ -0,0 +1,29 @@
+// Copyright 2012 Cloudera Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+#ifndef IMPALA_SECRET_SHARING_UDF_H
+#define IMPALA_SECRET_SHARING_UDF_H
+
+#include <udf/udf.h>
+
+using namespace impala_udf;
+
+StringVal SS_Split(FunctionContext* context, const IntVal& arg1, const IntVal& arg2, 
+    const StringVal& arg3);
+
+StringVal SS_Combine(FunctionContext* context, const StringVal& arg1, 
+    const StringVal& arg2);
+
+#endif
diff --git a/cmake_modules/FindCryptopp.cmake b/cmake_modules/FindCryptopp.cmake
new file mode 100644
index 0000000..854ad34
--- /dev/null
+++ b/cmake_modules/FindCryptopp.cmake
@@ -0,0 +1,42 @@
+# - Find CryptOpp
+# CRYPTOPP_ROOT hints a location
+#
+# This module defines
+#  CRYPTOPP_INCLUDE_DIR, where to find LDAP headers
+#  CRYPTOPP_STATIC_LIBRARY, the LDAP library to use.
+#  cryptoppstatic, imported libraries
+
+set(THIRDPARTY_CRYPTOPP $ENV{IMPALA_HOME}/thirdparty/cryptopp)
+
+set(THIRDPARTY $ENV{IMPALA_HOME}/thirdparty)
+set(CRYPTOPP_SEARCH_LIB_PATH
+  ${CRYPTOPP_ROOT}
+  ${THIRDPARTY_CRYPTOPP}
+)
+
+find_path(CRYPTOPP_INCLUDE_DIR aes.h PATHS
+  ${CRYPTOPP_ROOT}
+  ${THIRDPARTY_CRYPTOPP}
+  NO_DEFAULT_PATH)
+
+find_library(CRYPTOPP_STATIC_LIBRARY libcryptopp.a
+  PATHS ${CRYPTOPP_SEARCH_LIB_PATH}
+        NO_DEFAULT_PATH
+        DOC   "Static Cryptopp library"
+)
+
+if (NOT CRYPTOPP_STATIC_LIBRARY OR NOT CRYPTOPP_INCLUDE_DIR)
+  message(FATAL_ERROR "CRYPTOPP includes and libraries NOT found.")
+  set(CRYPTOPP_FOUND FALSE)
+else()
+  set(CRYPTOPP_FOUND TRUE)
+  add_library(cryptoppstatic STATIC IMPORTED)
+  set_target_properties(cryptoppstatic PROPERTIES IMPORTED_LOCATION ${CRYPTOPP_STATIC_LIBRARY})
+endif ()
+
+
+mark_as_advanced(
+  CRYPTOPP_STATIC_LIBRARY
+  CRYPTOPP_INCLUDE_DIR
+  cryptoppstatic
+)
diff --git a/common/function-registry/impala_functions.py b/common/function-registry/impala_functions.py
index 879ff8a..7172374 100644
--- a/common/function-registry/impala_functions.py
+++ b/common/function-registry/impala_functions.py
@@ -538,6 +538,14 @@ visible_functions = [
   [['isnotfalse'], 'BOOLEAN', ['BOOLEAN'], 'impala::ConditionalFunctions::IsNotFalse'],
 
   # Utility functions
+  [['decrypt'], 'STRING', ['STRING'],
+   '_ZN6impala16UtilityFunctions7DecryptEPN10impala_udf15FunctionContextERKNS1_9StringValE',
+   '_ZN6impala16UtilityFunctions12CryptPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE',
+   '_ZN6impala16UtilityFunctions10CryptCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE'],
+  [['encrypt'], 'STRING', ['STRING'],
+   '_ZN6impala16UtilityFunctions7EncryptEPN10impala_udf15FunctionContextERKNS1_9StringValE',
+   '_ZN6impala16UtilityFunctions12CryptPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE',
+   '_ZN6impala16UtilityFunctions10CryptCloseEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE'],
   [['uuid'], 'STRING', [],
    '_ZN6impala16UtilityFunctions4UuidEPN10impala_udf15FunctionContextE',
    '_ZN6impala16UtilityFunctions11UuidPrepareEPN10impala_udf15FunctionContextENS2_18FunctionStateScopeE',
diff --git a/common/thrift/Frontend.thrift b/common/thrift/Frontend.thrift
index 1842694..d4e9d57 100644
--- a/common/thrift/Frontend.thrift
+++ b/common/thrift/Frontend.thrift
@@ -716,6 +716,22 @@ struct TGetAllHadoopConfigsResponse {
   1: optional map<string, string> configs;
 }
 
+struct TGetKeysRequest {
+  1: required list<string> key_names;
+}
+
+struct TGetKeysResponse {
+  1: optional list<string> keys;
+}
+
+struct TGetKeyRequest {
+  1: required string key_name;
+}
+
+struct TGetKeyResponse {
+  1: optional string key;
+}
+
 // BE startup options
 struct TStartupOptions {
   1: optional bool compute_lineage
diff --git a/fe/src/main/java/com/cloudera/impala/service/JniFrontend.java b/fe/src/main/java/com/cloudera/impala/service/JniFrontend.java
index 4a32777..0fa908e 100644
--- a/fe/src/main/java/com/cloudera/impala/service/JniFrontend.java
+++ b/fe/src/main/java/com/cloudera/impala/service/JniFrontend.java
@@ -22,6 +22,17 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import java.net.URI;
+import java.net.URISyntaxException;
+import org.apache.hadoop.crypto.key.KeyProvider;
+import org.apache.hadoop.crypto.key.KeyProvider.KeyVersion;
+import org.apache.hadoop.crypto.key.KeyProviderFactory;
+import org.apache.hadoop.security.authorize.AuthorizationException;
+import com.cloudera.impala.thrift.TGetKeysRequest;
+import com.cloudera.impala.thrift.TGetKeysResponse;
+import com.cloudera.impala.thrift.TGetKeyRequest;
+import com.cloudera.impala.thrift.TGetKeyResponse;
+
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
 import org.apache.hadoop.fs.FileSystem;
@@ -102,6 +113,8 @@ public class JniFrontend {
   private static final long MIN_DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT_MS =
       10 * 1000;
 
+  private final KeyProvider KP_;
+
   /**
    * Create a new instance of the Jni Frontend.
    */
@@ -126,6 +139,21 @@ public class JniFrontend {
     LOG.info(JniUtil.getJavaVersion());
 
     frontend_ = new Frontend(authConfig);
+
+    String kmsUri = CONF.get("dfs.encryption.key.provider.uri");
+    if (kmsUri == null) {
+      LOG.warn("Please set dfs.encryption.key.provider.uri if you want to " + 
+          "enable encryption");
+    }
+
+    try {
+      URI uri = new URI(kmsUri);      
+      KP_ = KeyProviderFactory.get(uri, CONF);
+    } catch (IOException e) {
+      throw new InternalException(e.getMessage());
+    } catch (URISyntaxException e) {
+      throw new InternalException(e.getMessage());
+    }
   }
 
   /**
@@ -535,6 +563,61 @@ public class JniFrontend {
     }
   }
 
+//  public byte[] getKeys(byte[] serializedRequest) throws ImpalaException {
+//    TGetKeysRequest request = new TGetKeysRequest();
+//    JniUtil.deserializeThrift(protocolFactory_, request, serializedRequest);
+//    TGetKeysResponse result = new TGetKeysResponse();
+//    List<String> keyNames = request.getKey_names();
+//    List<String> keys = Lists.newArrayListWithCapacity(keyNames.size());
+//    for (String keyName: keyNames) {
+//      KeyVersion kv = null;
+//      try {
+//        kv = KP_.getCurrentKey(keyName);
+//      } catch (IOException e) {
+//        //
+//      }
+//      if (kv != null) {
+//        byte[] key = kv.getMaterial();
+//        keys.add(new String(key));
+//      } else {
+//        keys.add("");
+//      }
+//    }
+//    result.setKeys(keys);
+//    TSerializer serializer = new TSerializer(protocolFactory_);
+//    try {
+//      return serializer.serialize(result);
+//    } catch (TException e) {
+//      throw new InternalException(e.getMessage());
+//    }
+//  }
+//
+  public byte[] getKey(byte[] serializedRequest) throws ImpalaException {
+    TGetKeyRequest request = new TGetKeyRequest();
+    JniUtil.deserializeThrift(protocolFactory_, request, serializedRequest);
+    TGetKeyResponse result = new TGetKeyResponse();
+    String keyName = request.getKey_name();
+    String key;
+    KeyVersion kv = null;
+    try {
+      kv = KP_.getCurrentKey(keyName);
+    } catch (IOException e) {
+      //
+    }
+    if (kv != null) {
+      key = new String(kv.getMaterial());
+    } else {
+      key = "";
+    }
+    result.setKey(key);
+    TSerializer serializer = new TSerializer(protocolFactory_);
+    try {
+      return serializer.serialize(result);
+    } catch (TException e) {
+      throw new InternalException(e.getMessage());
+    }
+  }
+
   /**
    * Returns the corresponding config value for the given key as a serialized
    * TGetHadoopConfigResponse. If the config value is null, the 'value' field in the
-- 
2.8.1

